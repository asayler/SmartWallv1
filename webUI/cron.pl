#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper; #cleanly print array, hash

#sw opcodes
my $state = "0x0010";
my $voltage = "0x0020";
my $current = "0x0021";
my $power = "0x0022";
my $freq = "0x0023";
my $phase = "0x0024";
#sw types
my $outlet = "0x8000000000000004";
my $master = "0x8000000000000001";
my $universal = "0x8000000000000000";

chdir("../usermon") or die "$!";

#query for all devices and info
my $outlets_raw = `./swls -raw`;
chomp($outlets_raw);
my @ls_lines = split(/\n/,$outlets_raw); #split on new lines

#fill hash of hashes, %lookup, with device info
my %lookup;
foreach my $row (@ls_lines){
    my @items = split(/ /,$row);
    $lookup{$items[7]}{'swAdr'}=$items[1];
    $lookup{$items[7]}{'ipAdr'}=$items[2];
    $lookup{$items[7]}{'type'}=$items[3];
    $lookup{$items[7]}{'channels'}=$items[4];
    $lookup{$items[7]}{'grpId'}=$items[5];
    $lookup{$items[7]}{'ver'}=$items[6];
}
#print Dumper(%lookup); #debug
#print "$lookup{'0x0000000000000011'}{'swAdr'}\n"; #debug

#for devices of type 'outlet', query for power
foreach my $key (sort keys %lookup) { 
    print "$key"; #debug
    print "\n"; #debug
    my $swAdr;
    my $power_string; #response to power query
    if($lookup{$key}{'type'} eq $outlet) {
	my $channels = $lookup{$key}{'channels'};
	if ($channels eq "0x01") {
	    #one channel device
	    $swAdr = $lookup{$key}{'swAdr'};
	    my $power_query = "./swChnMsg $swAdr QUERY OUTLET $power 1 0 x";
	    print "$power_query\n"; #debug
	    #$power_string = `$power_query`;
	} elsif ($channels eq "0x02") {
	    #two channel device
	    $swAdr = $lookup{$key}{'swAdr'};
	    my $power_query = "./swChnMsg $swAdr QUERY OUTLET $power 1 0 x 1 x";
	    print "$power_query\n"; #debug
	    #$power_string = `$power_query`;
	} else {
	    print "E: Invalid number of channels\n";
	    #error or unhandled number of channels
	}
	#deal with $power_string
	if (defined($power_string)) {
	    if($power_string =~ m/ERROR/) {
		#error generated by Andy's script
	    } elsif ($power_string =~ m/$swAdr REPORT OUTLET $power (\d+)$/) {
		#proper response - parse it
	    } else {
		#some other kind of error
	    }
	} else {
	    #no power_string
	}
    } else {
	print "W: Not an outlet.\n";
	#not outlet, handle other types as relevant
    }
    undef($power_string);
}
    

