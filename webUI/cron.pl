#!/usr/bin/perl

#place in /etc/cron.d
#run by line in /etc/crontab
#TO DO: relative path to location of swls and swChnMsg

use strict;
use warnings;
use Data::Dumper; #cleanly print array, hash

#sw opcodes
my $state = "0x0010";
my $voltage = "0x0020";
my $current = "0x0021";
my $power = "0x0022";
my $freq = "0x0023";
my $phase = "0x0024";
#sw types
my $outlet = "0x8000000000000004";
my $master = "0x8000000000000001";
my $universal = "0x8000000000000000";

chdir("/home/vermilion/SmartWallv1/usermon") or die "$!";

#query for all devices and info
my $outlets_raw = `./swls -raw`; #backtick system call
chomp($outlets_raw);
my @ls_lines = split(/\n/,$outlets_raw); #split on new lines

#fill hash of hashes, %lookup, with device info
my %lookup;
foreach my $row (@ls_lines){
    my @items = split(/ /,$row);
    $items[7] =~ s/ //;
    $lookup{$items[7]}{'swAdr'}=$items[1];
    $lookup{$items[7]}{'ipAdr'}=$items[2];
    $lookup{$items[7]}{'type'}=$items[3];
    $lookup{$items[7]}{'channels'}=$items[4];
    $lookup{$items[7]}{'grpId'}=$items[5];
    $lookup{$items[7]}{'ver'}=$items[6];
}
#print Dumper(%lookup); #debug
#print "$lookup{'0x0000000000000011'}{'swAdr'}\n"; #debug

#for devices of type 'outlet', query for power
my $total_power = 0; #sum for all outlets/channels
my $problem_flag = 0;
#backtick system call to get date/time
chomp(my $month = `date "+%m"`); #01-12
chomp(my $year = `date "+%Y"`); #4 digits (ie 1998)
chomp(my $day = `date "+%d"`); #01-31
chomp(my $hour = `date "+%H"`); #00-23
chomp(my $minute = `date "+%M"`); #00-59
foreach my $key (sort keys %lookup) { 
    #print "$key"; #debug
    #print "\n"; #debug
    my $swAdr;
    my $power_string; #response to power query
    if($lookup{$key}{'type'} eq $outlet) { #if device is of type outlet
	my $channels = $lookup{$key}{'channels'};
	if ($channels eq "0x01") { #and it has 1 channel
	    #one channel device
	    $swAdr = $lookup{$key}{'swAdr'};
	    my $power_query = "./swChnMsg $swAdr QUERY OUTLET $power 8 0 x";
	    #print "$power_query\n"; #debug
	    $power_string = `$power_query`; #backtick system call
	    #chomp($power_string);
	} elsif ($channels eq "0x02") { #and it has 2 channels
	    #print "Entered 2-channel loop\n"; #debug
	    #two channel device
	    #$swAdr = $lookup{$key}{'swAdr'}; #for when all addresses work
	    $swAdr = "0x0011";
	    my $power_query = "./swChnMsg $swAdr QUERY OUTLET $power 8 0 x 1 x";
	    print "$power_query\n"; #debug
	    $power_string = `$power_query`; #backtick system call
	    chomp($power_string);
	    print "Power string is $power_string\n"; #debug
	} else { #error or unhandled number of channels
	    print "-E-: Invalid number of channels\n";
	    next;
	}
	#deal with $power_string
	if (defined($power_string)) {
	    if($power_string =~ m/ERROR/) { #got an error
		$problem_flag = 1; #total_power won't be valid
		print "problem with call $key\n";
		#error generated by Andy's script
	    } elsif ($power_string =~ m/$swAdr REPORT OUTLET $power 0 (\d+\.\d+)( 1 (\d+\.\d+))?$/) {#got a proper response w/ 1 or two channels
		my $power0, my $power1;
		if($channels eq "0x02"){ #two channels
		    $power0 = $1;
		    $power1 = $3;
		    $total_power = $total_power + $power0; #add to total
		    $total_power = $total_power + $power1; #add to toal
		    #print "Powers are: $power0, $power1\n"; #debug
		    #write to file
		    my $file_name = '../webUI/historic/'.$key.'_'.$month.'_'.$year;  
		    my $date_string = $day.".".$hour.".".$minute;
		    open(FILE_HANDLE,'>>',"$file_name") or die "-E- Unable to open $file_name : $!\n";
		    print FILE_HANDLE "$date_string $power0 $power1\n";
		    close(FILE_HANDLE);
		}else{ #one channel
		    $power0 = $1;
		    $total_power = $total_power + $power0; #add to total
		    #write to file
		    my $file_name = '../webUI/historic/'.$key.'_'.$month.'_'.$year;  
		    my $date_string = $day.".".$hour.".".$minute;
		    open(FILE_HANDLE,'>>',"$file_name") or die "-E- Unable to open $file_name : $!\n";
		    print FILE_HANDLE "$date_string $power0\n";
		    close(FILE_HANDLE);
		}
	    } else {
		#some other kind of error
	    }
	} else {
	    #no power_string
	}
    } else {
	#not outlet, handle other types as relevant
	next;
    }
    undef($power_string);
}

#print to totals file
if(!$problem_flag) { #total only valid if no problem cited
    print "Total power is: $total_power\n"; #debug
    my $file_name = '../webUI/historic/'.'total'.'_'.$month.'_'.$year;  
    my $date_string = $day.".".$hour.".".$minute;
    open(FILE_HANDLE,'>>',"$file_name") or die "-E- Unable to open $file_name : $!\n";
    print FILE_HANDLE "$date_string $total_power\n";
    close(FILE_HANDLE);
}
